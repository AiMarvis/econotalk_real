{
  "rules": [
    {
      "type": "prd",
      "content": "# 경제 콘텐츠 통합 커뮤니티 PRD\n\n## 1. 한눈에 보기 (Executive Summary)\n경제·투자 초보자가 흩어진 경제 컬럼, 뉴스레터, 유튜브 영상을 한곳에서 모아보고, 실시간 채팅으로 의견을 교환하며 학습할 수 있는 웹 기반 커뮤니티 서비스를 구축한다. 초기에는 핵심 콘텐츠 업로드·탐색 기능(MVP)과 채팅, 개인화 피드에 집중하고, 사용자 피드백을 받아 점진적으로 확장한다.\n\n## 2. 문제 정의 (Pain Point)\n- 경제 정보가 플랫폼·포맷별로 분산돼 있어 초보자가 모아보기 어렵고, 탐색 시간이 많이 든다.\n\n## 3. 목표 (User Goal & Business Goal)\n- 사용자 목표: 쉽고 빠르게 믿을 수 있는 경제 콘텐츠를 모아 학습\n- 비즈니스 목표: 통합 경제 콘텐츠 커뮤니티로 초기 사용자 5,000명 확보, 월간 활성 이용자(MAU) 5,000 달성\n\n## 4. 핵심 지표 (Success Metrics)\n- MAU, 평균 세션 길이, 재방문율\n- 게시글/댓글 증가율\n- 유입 대비 가입 전환율\n\n## 5. 대상 사용자 (Primary User)\n- 20~30대 경제·투자 초보자\n  - 모바일·웹 사용에 익숙하며, 여러 경제 유튜브·뉴스레터를 구독하지만 정보를 모아보는 데 어려움을 느낀다.\n\n## 6. 주요 사용 시나리오 (Main Use Case)\n- 사용자는 다양한 출처의 경제 콘텐츠를 한 화면에서 탐색·읽고, 북마크/좋아요로 저장하며, 필요 시 실시간 채팅방에서 즉시 질문·답변을 주고받는다.\n\n## 7. 기능 요구사항\n### 7.1 핵심 기능 (MVP)\n1. 콘텐츠 업로드 & 공유\n   - 경제 컬럼, 뉴스레터, 유튜브 영상 업로드\n   - 태그 지정, 썸네일 처리, 예약 발행(뉴스레터)\n2. 콘텐츠 탐색 & 개인화 피드\n   - 태그 기반 피드, 관심사 설정, 무한 스크롤/페이지네이션\n3. 실시간 채팅\n   - 룸별 채팅, 신고·차단 기능, 메시지 지연 ≤1초\n4. 인증 & 권한\n   - 소셜 로그인(OAuth: Google, Kakao), 비로그인 사용자는 읽기 전용\n\n### 7.2 보조 기능\n- 북마크 & 좋아요\n- 검색 & 고급 필터\n- 알림 센터(댓글, 답글, 새 글)\n- 콘텐츠 신고·차단 & 스팸 필터링\n\n### 7.3 관리자 기능\n- Admin 대시보드: 콘텐츠/회원/신고 관리, 통계 차트\n\n## 8. 비기능 요구사항\n- 성능: 평균 응답 300ms, LCP 2.5s 이하\n- 보안: HTTPS, CSRF 보호, OAuth2, 콘텐츠 모더레이션 정책\n- 사용성: 모바일 퍼스트, 접근성 WCAG 2.1 AA\n- 확장성: DB 샤딩 대비, 파일 스토리지 S3 전환 대비\n\n## 9. 개발 전략\n- MVP 우선 출시 → 사용자 피드백 → 반복 개선(Lean & Agile 혼합)\n- 2개월 내 베타, 4개월 내 정식 런칭 목표\n\n## 10. 기술 스택(초안)\n- 백엔드: Ruby on Rails 8 (모놀리식)\n- 프런트엔드: Hotwire(Turbo + Stimulus) & Tailwind CSS\n- DB: PostgreSQL (개발 SQLite)\n- 실시간: Action Cable + Redis\n- 배포: Render.com / Docker\n\n## 11. 리스크 & 완화\n- 초기 콘텐츠 부족 ⇒ 크리에이터 인센티브, 온보딩 가이드\n- 채팅 트래픽 급증 ⇒ Redis, 수평 확장 구조 준비\n- 저작권 문제 ⇒ 신고·필터, 이용약관 강화\n\n## 12. 일정 (High-Level Timeline)\n| 기간 | 마일스톤 |\n| ---- | -------- |\n| M0-M1 | 요구사항 확정, 정보구조 & 디자인 시안 |\n| M1-M2 | 핵심 모델/DB 스키마, 인증, 콘텐츠 업로드 개발 |\n| M2-M3 | 피드, 채팅, 북마크/좋아요, 기본 검색 개발 │\n| M3-M4 | 베타오픈 & 피드백 수집, 버그 수정 │\n| M4-M5 | 알림, 필터, 신고, Admin 대시보드, 정식 런칭 │\n",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "architecture",
      "content": "# Technical Requirements Document (TRD)\n\n## 1. Executive Technical Summary\n- **Project Overview**: 경제·투자 초보자를 위한 콘텐츠 통합 커뮤니티를 웹 기반 서비스로 구축합니다. Ruby on Rails 8 모놀리식 아키텍처와 Hotwire 스택을 채택하여 서버 중심의 반응형 UI를 구현함으로써, 빠른 MVP 개발 및 출시를 목표로 합니다.\n- **Core Technology Stack**: 백엔드는 Ruby on Rails, 프런트엔드는 Hotwire(Turbo + Stimulus)와 Tailwind CSS를 사용합니다. 데이터베이스는 PostgreSQL, 실시간 통신 및 캐시는 Redis와 Action Cable을 활용하며, 배포는 Render.com의 Docker 컨테이너 환경을 통해 이루어집니다.\n- **Key Technical Objectives**: 초기 사용자 5,000명 수용을 목표로 하며, 평균 응답 시간 300ms 이하, LCP(Largest Contentful Paint) 2.5초 이하, 실시간 채팅 메시지 지연 1초 미만을 달성합니다. 모바일 퍼스트 접근 방식을 최우선으로 고려합니다.\n- **Critical Technical Assumptions**: Rails 모놀리식 아키텍처는 MVP 단계의 요구사항을 충분히 만족시키고 초기 확장성에 효과적으로 대응할 수 있습니다. Render.com은 안정적인 배포, 관리형 데이터베이스 및 오토스케일링 기능을 제공하여 인프라 운영 부담을 최소화합니다. 개발팀은 Rails 및 Hotwire 생태계에 대한 이해도를 갖추고 있습니다.\n\n## 2. Tech Stack\n\n| Category | Technology / Library | Reasoning (Why it's chosen for this project) |\n| --- | --- | --- |\n| 백엔드 프레임워크 | Ruby on Rails 8 | 생산성이 높아 MVP를 신속하게 개발하는 데 적합하며, Hotwire와의 네이티브 통합으로 SPA와 유사한 사용자 경험을 효율적으로 구현할 수 있습니다. |\n| 프런트엔드 프레임워크 | Hotwire (Turbo + Stimulus) | 서버 사이드 렌더링(SSR)을 통해 복잡한 프런트엔드 상태 관리 없이 동적인 UI를 구축할 수 있어 개발 복잡도를 낮추고 성능 목표(LCP) 달성에 유리합니다. |\n| UI 스타일링 | Tailwind CSS | 유틸리티-퍼스트 접근법을 통해 일관성 있는 UI를 빠르게 구축하고, Rails 템플릿 내에서 직접 스타일을 관리하여 개발 효율을 높입니다. |\n| 데이터베이스 | PostgreSQL (운영), SQLite (개발) | PostgreSQL은 안정성과 확장성이 검증되었으며, 복잡한 쿼리 및 데이터 타입을 지원하여 향후 기능 확장에 용이합니다. SQLite는 개발 환경 설정이 간편합니다. |\n| 실시간 통신 | Action Cable + Redis | Rails에 내장된 Action Cable은 WebSocket 통신을 쉽게 구현하게 해주며, Redis의 Pub/Sub 기능을 활용하여 안정적인 실시간 채팅 기능을 최소한의 노력으로 구축할 수 있습니다. |\n| 캐싱 / 백그라운드 작업 | Redis | Action Cable의 백엔드 역할 외에도, 뷰 캐싱(Russian Doll Caching), 데이터 캐싱 및 Active Job의 백엔드로 활용하여 시스템 전반의 성능을 향상시킵니다. |\n| 배포 / 호스팅 | Render.com / Docker | Docker를 통해 개발-운영 환경의 일관성을 보장합니다. Render는 Git 푸시 기반의 자동 배포, 관리형 DB/Redis, 오토스케일링을 지원하여 소규모 팀의 인프라 운영 부담을 크게 줄여줍니다. |\n| 인증 | OmniAuth (Google, Kakao) | Rails 커뮤니티에서 널리 사용되는 표준 라이브러리로, 소셜 로그인 기능을 안정적이고 안전하게 구현할 수 있습니다. |\n## 2.1. Icon System Specification\n\n- **Icon Library**: Tabler Icons (via rails_icons gem)\n- **Installation Instructions**: Before using icons, install the library with:\n  - `rails generate rails_icons:install --libraries=tabler`\n- **Usage in Views**:\n  - Use the `icon` helper method (not `rails_icon`) to render icons in Rails views.\n  - Example: `<%= icon('tabler:star', style: 'width: 24px; height: 24px;') %>`\n- **Icon Set Reference**: All available Tabler icons can be viewed at https://tabler.io/icons .\n- **Documentation**: Refer to https://github.com/Rails-Designer/rails_icons for detailed gem usage, customization, and library updates.\n\n**Note:** Ensure the Tabler library is specified during installation. Only the `icon` helper should be used for icon rendering throughout the project.\n## 3. System Architecture Design\n\n### Top-Level building blocks\n- **Web Application (Ruby on Rails Monolith)**: 모든 비즈니스 로직, API 엔드포인트, 사용자 인터페이스 렌더링을 담당하는 중앙 구성 요소입니다.\n  - **Sub-building blocks**: MVC(Model-View-Controller), Action Cable(실시간 통신), Active Record(ORM), Hotwire(Turbo/Stimulus), Active Job(백그라운드 처리)\n- **Database (PostgreSQL)**: 사용자 정보, 콘텐츠, 채팅 메시지, 태그 등 모든 영구 데이터를 저장하는 주 데이터 저장소입니다.\n- **Cache & Real-time Messaging (Redis)**: Action Cable의 메시지 브로커(Pub/Sub), 애플리케이션 캐시, 백그라운드 작업 큐의 백엔드로 사용되어 시스템 성능과 반응성을 향상시킵니다.\n- **Deployment Platform (Render.com)**: Docker 컨테이너로 패키징된 웹 애플리케이션, 데이터베이스, Redis 인스턴스를 호스팅하고 관리합니다. 로드 밸런싱, CI/CD 파이프라인, 스케일링을 담당합니다.\n\n### Top-Level Component Interaction Diagram\n```mermaid\ngraph TD\n    subgraph \"사용자 브라우저\"\n        A[Hotwire Frontend]\n    end\n\n    subgraph \"Render.com Cloud\"\n        B[웹 서버 (Puma on Docker)]\n        C[PostgreSQL 데이터베이스]\n        D[Redis]\n    end\n\n    A -- HTTP Requests (Turbo Drive/Frames) --> B\n    A -- WebSocket (Action Cable) --> B\n    B -- CRUD Operations --> C\n    B -- Pub/Sub & Caching --> D\n```\n- 사용자는 브라우저에서 Hotwire로 구현된 프런트엔드와 상호작용합니다.\n- 페이지 이동, 폼 제출 등 일반적인 요청은 HTTP를 통해 Render.com에서 실행 중인 Rails 애플리케이션으로 전송됩니다.\n- Rails 애플리케이션은 요청을 처리하고, PostgreSQL 데이터베이스에 데이터를 읽거나 쓰며, Redis를 캐싱 및 백그라운드 작업에 활용합니다.\n- 실시간 채팅과 같은 기능의 경우, Action Cable을 통해 브라우저와 서버 간에 영구적인 WebSocket 연결이 수립되며, Redis가 메시지 전파(Pub/Sub)를 중개합니다.\n\n### Code Organization & Convention\n**Domain-Driven Organization Strategy**\n- **Domain Separation**: Rails의 'Convention over Configuration' 원칙에 따라 비즈니스 도메인(예: User, Content, Chat)을 중심으로 모델, 컨트롤러, 뷰를 구성합니다. `app/models/user.rb`, `app/controllers/users_controller.rb`와 같이 리소스 중심으로 파일을 그룹화합니다.\n- **Layer-Based Architecture**: Rails의 MVC 패턴은 표현(Views), 비즈니스 로직(Models, Concerns), 데이터 접근(Active Record), 인프라(Initializers) 계층을 자연스럽게 분리합니다.\n- **Feature-Based Modules**: 복잡한 기능은 `Concern` 모듈을 활용하여 모델과 컨트롤러의 책임을 분리하고 코드 재사용성을 높입니다.\n- **Shared Components**: 여러 도메인에서 공통으로 사용되는 헬퍼, 자바스크립트 컨트롤러, 뷰 파셜(Partial)은 `app/helpers`, `app/javascript/controllers`, `app/views/shared` 등 공유 디렉터리에서 관리합니다.\n\n**Universal File & Folder Structure**\n```\n/\n├── app/\n│   ├── assets/\n│   ├── channels/          # Action Cable (실시간 채팅)\n│   ├── controllers/       # HTTP 요청 처리\n│   │   └── concerns/\n│   ├── javascript/        # Stimulus 컨트롤러\n│   │   └── controllers/\n│   ├── jobs/              # 백그라운드 작업 (Active Job)\n│   ├── models/            # 비즈니스 로직 및 DB 매핑 (Active Record)\n│   │   └── concerns/\n│   └── views/             # 템플릿 (ERB & Turbo Frames/Streams)\n│       ├── layouts/\n│       └── contents/\n├── config/\n│   ├── initializers/\n│   └── routes.rb          # URL 라우팅\n├── db/\n│   └── migrate/           # 데이터베이스 스키마 마이그레이션\n├── lib/\n├── public/\n├── test/                  # 자동화 테스트\n├── Gemfile                # 의존성 관리\n└── Dockerfile             # 컨테이너화 설정\n```\n\n### Data Flow & Communication Patterns\n- **Client-Server Communication**: Hotwire를 통해 서버 중심의 통신이 이루어집니다. Turbo Drive가 전체 페이지 로딩 없이 내비게이션을 처리하고, Turbo Frames와 Turbo Streams가 서버에서 푸시된 HTML 조각으로 UI를 동적으로 업데이트합니다.\n- **Database Interaction**: 모든 데이터베이스 상호작용은 Active Record ORM을 통해 수행됩니다. N+1 문제를 방지하기 위해 `includes`를 적극적으로 사용하고, 복잡한 쿼리는 모델의 `scope`으로 캡슐화합니다.\n- **External Service Integration**: Google, Kakao 소셜 로그인은 `OmniAuth` 라이브러리를 통해 표준 OAuth 2.0 플로우를 따릅니다.\n- **Real-time Communication**: Action Cable을 사용하여 클라이언트(브라우저)와 서버 간 WebSocket 연결을 맺습니다. 서버의 채널은 Redis Pub/Sub을 통해 특정 클라이언트 그룹에 메시지를 브로드캐스팅합니다.\n- **Data Synchronization**: 모놀리식 아키텍처이므로 데이터 동기화 문제는 거의 발생하지 않습니다. 데이터 일관성은 PostgreSQL의 트랜잭션을 통해 보장됩니다.\n\n## 4. Performance & Optimization Strategy\n- **데이터베이스 최적화**: 개발 환경에서 `bullet` 젬을 사용하여 N+1 쿼리를 감지하고 수정합니다. 외래 키, 태그, 검색 필드 등 자주 조회되는 컬럼에 데이터베이스 인덱스를 추가하여 쿼리 성능을 향상시킵니다.\n- **프런트엔드 성능 최적화**: Hotwire를 최대한 활용하여 JavaScript 페이로드를 최소화합니다. 전체 페이지 새로고침 대신 Turbo Frames/Streams를 사용하여 UI를 부분적으로 업데이트합니다. 이미지를 최적화하고 Render.com에서 기본 제공하는 CDN을 통해 정적 에셋을 서빙합니다.\n- **캐싱 전략**: 자주 변경되지 않는 UI 조각에 대해 Russian Doll Caching을 적용하여 뷰 렌더링 속도를 높입니다. 무거운 쿼리 결과나 계산된 데이터는 Redis를 이용한 저수준 캐싱을 활용합니다.\n- **백그라운드 작업 활용**: 뉴스레터 발송, 썸네일 생성 등 시간이 오래 걸리는 작업은 Active Job과 Redis 기반의 백그라운드 처리 시스템(예: Sidekiq)을 통해 비동기적으로 처리하여 웹 요청의 응답 시간을 단축합니다.\n\n## 5. Implementation Roadmap & Milestones\n### Phase 1: Foundation (MVP Implementation)\n- **Core Infrastructure**: Rails 8, PostgreSQL, Redis를 포함한 Render.com 개발/운영 환경 설정. CI/CD 파이프라인 구축.\n- **Essential Features**: 소셜 로그인(OAuth) 기반 회원 인증, 콘텐츠(컬럼, 영상) CRUD, 태그 기반 피드, Action Cable을 이용한 실시간 채팅방, 북마크/좋아요 기능 구현.\n- **Basic Security**: HTTPS 강제, CSRF 보호, 기본 보안 헤더 설정.\n- **Development Setup**: Docker 기반의 로컬 개발 환경 통일.\n- **Timeline**: 4개월 (베타 오픈 및 피드백 수집까지)\n\n### Phase 2: Feature Enhancement\n- **Advanced Features**: 관리자 대시보드(콘텐츠/회원 관리), 고급 검색 및 필터, 알림 센터(새 댓글, 답글) 기능 개발.\n- **Performance Optimization**: 실제 사용자 데이터 기반으로 데이터베이스 인덱스 튜닝 및 캐싱 전략 고도화.\n- **Enhanced Security**: 콘텐츠 신고/차단 기능, 스팸 필터링, 주요 API에 대한 Rate Limiting 적용.\n- **Monitoring Implementation**: Render의 내장 모니터링 외에 Skylight, New Relic 등 APM(Application Performance Monitoring) 도구 연동.\n- **Timeline**: 정식 런칭 후 지속적으로 진행\n\n## 6. Risk Assessment & Mitigation Strategies\n### Technical Risk Analysis\n- **Technology Risks**: 팀의 Hotwire 스택 숙련도 부족.\n  - **Mitigation Strategies**: 공식 문서 및 튜토리얼을 활용한 학습, 페어 프로그래밍 도입, 간단한 기능부터 점진적으로 적용하며 경험 축적.\n- **Performance Risks**: 실시간 채팅 트래픽 급증으로 인한 서버 부하.\n  - **Mitigation Strategies**: Render.com의 오토스케일링 기능을 활용하여 웹 서버(dyno) 증설 준비. 필요시 Redis 플랜을 업그레이드하고, Action Cable의 Connection Pool 설정을 최적화.\n- **Security Risks**: OAuth 구현 취약점 또는 서드파티 라이브러리 보안 문제.\n  - **Mitigation Strategies**: `omniauth` 등 커뮤니티에서 검증된 표준 라이브러리를 사용하고, 보안 권장 사항을 철저히 준수. 정기적인 의존성 보안 스캔(예: `bundle-audit`) 수행.\n- **Integration Risks**: Google/Kakao 등 외부 인증 서비스의 장애.\n  - **Mitigation Strategies**: 특정 인증 제공자 장애 시 사용자에게 명확한 오류 메시지를 안내하고, 다른 로그인 옵션을 시도하도록 유도하는 등 우아한 실패(Graceful Degradation) 처리 로직 구현.\n\n### Project Delivery Risks\n- **Timeline Risks**: 실시간 채팅 또는 개인화 피드 기능의 구현 복잡도 과소평가.\n  - **Mitigation Strategies**: MVP 단계에서는 가장 기본적인 채팅(단일 채널, 텍스트 전용) 및 피드(태그 기반) 기능에 집중하고, 이후 피드백을 통해 점진적으로 고도화.\n- **Resource Risks**: 모놀리식 구조에서 특정 개발자에게 업무가 집중되는 병목 현상.\n  - **Mitigation Strategies**: 코드의 모듈성(Concerns, Service Objects)을 높이고, 명확한 코드 컨벤션을 준수하여 가독성을 향상. 코드 리뷰 및 문서화를 통해 팀 전체의 코드 이해도를 높임.\n- **Quality Risks**: 빠른 개발 속도로 인한 기술 부채 누적.\n  - **Mitigation Strategies**: RSpec/Minitest를 이용한 자동화 테스트 커버리지 확보. 주기적인 리팩토링 시간을 별도로 할당하고, 정적 코드 분석 도구(예: RuboCop)를 CI에 통합.\n- **Deployment Risks**: Render.com 배포 환경 설정 오류 또는 장애.\n  - **Mitigation Strategies**: 운영(Production)과 동일한 스테이징(Staging) 환경을 구축하여 배포 전 충분한 테스트를 수행. 주요 배포 절차를 문서화하고 자동화 스크립트를 활용.",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "guideline",
      "content": "# Project Code Guidelines: Economic Content Community\n\nThis document outlines the coding standards and best practices for the Economic Content Community project. Adhering to these guidelines ensures consistent, maintainable, high-quality, and performant code, aligning with our project goals of rapid MVP development and a server-centric approach.\n\n## 1. Project Overview\n\nThe Economic Content Community is a web-based platform designed for economic and investment beginners to access aggregated content (columns, newsletters, YouTube videos) and engage in real-time discussions.\n\n**Key Architectural Decisions:**\n*   **Monolithic Backend**: Ruby on Rails 8 serves as the core, handling all business logic, API endpoints, and UI rendering.\n*   **Server-Side Rendered Frontend**: Hotwire (Turbo + Stimulus) is used to deliver a dynamic, SPA-like user experience with minimal JavaScript, reducing frontend complexity and improving initial page load performance (LCP).\n*   **Styling**: Tailwind CSS for utility-first, consistent UI development.\n*   **Database**: PostgreSQL for robust data storage, with SQLite for development.\n*   **Real-time Communication**: Action Cable and Redis facilitate real-time chat and other instant updates.\n*   **Deployment**: Dockerized application on Render.com, leveraging its managed services for PostgreSQL and Redis.\n\n## 2. Core Principles\n\n1.  **Embrace Server-Side Rendering (SSR) with Hotwire**: Prioritize HTML-over-the-wire for UI updates to minimize JavaScript payload and improve LCP.\n2.  **Adhere to Rails' Convention over Configuration**: Follow established Rails patterns and directory structures to enhance consistency and reduce development overhead.\n3.  **Write Clean, Testable, and Maintainable Code**: Ensure code is readable, modular, well-tested, and easy to understand for all team members.\n4.  **Optimize for Performance from the Outset**: Proactively address N+1 queries, leverage caching, and offload heavy tasks to background jobs to meet performance targets.\n\n## 3. Language-Specific Guidelines\n\n### 3.1 Ruby on Rails\n\n*   **File Organization and Directory Structure**:\n    *   **MUST**: Follow the standard Rails MVC structure (`app/models`, `app/controllers`, `app/views`).\n    *   **MUST**: Place shared model logic in `app/models/concerns`.\n    *   **MUST**: Place shared controller logic in `app/controllers/concerns`.\n    *   **MUST**: Use `app/javascript/controllers` for Stimulus controllers.\n    *   **MUST**: Use `app/jobs` for Active Job background tasks.\n    *   **MUST**: Implement complex business logic that doesn't fit naturally in a model or controller within dedicated `app/services` objects.\n    *   **MUST**: Use `app/forms` for complex form submissions or data transformations that span multiple models.\n    *   **MUST**: Group related views in subdirectories (e.g., `app/views/contents`, `app/views/chats`).\n    *   **MUST**: Utilize `app/views/shared` for reusable partials.\n\n*   **Import/Dependency Management**:\n    *   **MUST**: Manage Ruby dependencies via `Gemfile`. Keep gems updated regularly.\n    *   **MUST**: Use `importmap` for JavaScript dependencies (Rails 7+ default) to avoid complex build setups.\n    *   **MUST NOT**: Add unnecessary gems that introduce significant overhead or duplicate existing Rails functionality.\n\n*   **Error Handling Patterns**:\n    *   **MUST**: Use `rescue_from` in controllers for handling common exceptions (e.g., `ActiveRecord::RecordNotFound` for 404s).\n    *   **MUST**: Implement custom error pages (`public/404.html`, `public/500.html`) for user-friendly error display.\n    *   **MUST**: Log errors effectively using Rails' default logger.\n\n### 3.2 Hotwire (Turbo + Stimulus)\n\n*   **File Organization and Directory Structure**:\n    *   **MUST**: Place all Stimulus controllers in `app/javascript/controllers`.\n    *   **MUST**: Keep ERB templates clean and directly embed `turbo_frame_tag` and `turbo_stream_from` helpers.\n    *   **MUST NOT**: Create a separate `src` directory for frontend code; integrate directly into `app/javascript`.\n\n*   **Import/Dependency Management**:\n    *   **MUST**: Rely on Stimulus's auto-loading mechanism for controllers.\n    *   **MUST NOT**: Introduce complex frontend build tools (e.g., Webpack, Vite) unless absolutely necessary for specific features.\n\n*   **Error Handling Patterns**:\n    *   **MUST**: Leverage Turbo's built-in error handling for form submissions and navigation. Server-side validation errors should be rendered as HTML and returned.\n    *   **MUST**: For network errors, ensure the server returns appropriate HTTP status codes (e.g., 422 for unprocessable entity, 500 for server errors).\n    *   **MUST NOT**: Implement extensive client-side JavaScript error handling that duplicates server-side logic.\n\n### 3.3 Tailwind CSS\n\n*   **File Organization and Directory Structure**:\n    *   **MUST**: Use `app/assets/stylesheets/application.tailwind.css` as the primary entry point for Tailwind directives (`@tailwind base`, `@tailwind components`, `@tailwind utilities`).\n    *   **MUST**: Define any custom CSS or component styles within this file or separate partials imported into it.\n\n*   **Import/Dependency Management**:\n    *   **MUST**: Configure `tailwind.config.js` to purge unused CSS classes for production builds.\n\n## 4. Code Style Rules\n\n### MUST Follow:\n\n*   **Ruby/Rails Naming Conventions**:\n    *   **MUST**: Use `snake_case` for method names, variable names, and file names.\n    *   **MUST**: Use `CamelCase` for class and module names.\n    *   **MUST**: Use `SCREAMING_SNAKE_CASE` for constants.\n    *   **Rationale**: Ensures consistency with Ruby and Rails standards, improving readability.\n\n*   **RuboCop Compliance**:\n    *   **MUST**: Ensure all Ruby code passes RuboCop checks. Integrate RuboCop into your IDE and pre-commit hooks.\n    *   **Rationale**: Enforces consistent code style and identifies potential issues, leading to higher code quality.\n\n*   **Strong Parameters**:\n    ```ruby\n    # MUST: Use strong parameters for all controller actions handling user input\n    # Rationale: Prevents mass assignment vulnerabilities.\n    def content_params\n      params.require(:content).permit(:title, :url, :category, tag_ids: [])\n    end\n    ```\n\n*   **Database Query Optimization (N+1 Prevention)**:\n    ```ruby\n    # MUST: Eager load associations to prevent N+1 queries.\n    # Rationale: Significantly reduces database round trips, improving performance.\n    def index\n      @contents = Content.includes(:user, :tags).all\n    end\n    ```\n\n*   **Service Objects for Complex Logic**:\n    ```ruby\n    # MUST: Encapsulate complex business logic in service objects.\n    # Rationale: Keeps models and controllers lean, improves testability and reusability.\n    # app/services/content_creator.rb\n    class ContentCreator\n      def initialize(params, user)\n        @params = params\n        @user = user\n      end\n\n      def call\n        Content.transaction do\n          content = @user.contents.create!(@params)\n          # Additional complex logic, e.g., notification, external API call\n          content\n        end\n      rescue ActiveRecord::RecordInvalid => e\n        # Handle specific errors\n        nil\n      end\n    end\n\n    # In controller\n    def create\n      content = ContentCreator.new(content_params, current_user).call\n      if content\n        redirect_to content, notice: 'Content was successfully created.'\n      else\n        render :new, status: :unprocessable_entity\n      end\n    end\n    ```\n\n*   **Stimulus Controllers for Client-Side Interactivity**:\n    ```javascript\n    // MUST: Use Stimulus for light, isolated client-side interactivity.\n    // Rationale: Minimizes JavaScript and keeps logic close to the HTML.\n    // app/javascript/controllers/toggle_controller.js\n    import { Controller } from \"@hotwired/stimulus\"\n\n    export default class extends Controller {\n      static targets = [\"item\"]\n\n      toggle() {\n        this.itemTarget.classList.toggle(\"hidden\")\n      }\n    }\n    ```\n\n*   **Tailwind CSS Utility-First**:\n    ```html\n    <!-- MUST: Prefer utility classes over custom CSS when possible. -->\n    <!-- Rationale: Faster development, consistent design, smaller CSS bundle. -->\n    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n      Click Me\n    </button>\n    ```\n\n### MUST NOT Do:\n\n*   **Fat Controllers/Models**:\n    ```ruby\n    # MUST NOT: Place excessive business logic directly in controllers or models.\n    # Rationale: Leads to bloated, hard-to-test, and hard-to-maintain code.\n    # Bad example (Fat Controller):\n    class ContentsController < ApplicationController\n      def create\n        @content = current_user.contents.new(params.require(:content).permit(:title, :url, :category))\n        if @content.save\n          # Complex logic here:\n          # - Send notifications\n          # - Process images\n          # - Update user statistics\n          redirect_to @content, notice: 'Content created.'\n        else\n          render :new\n        end\n      end\n    end\n    ```\n    *   **Correction**: Extract complex logic into Service Objects or Active Job.\n\n*   **N+1 Queries (Anti-pattern)**:\n    ```ruby\n    # MUST NOT: Execute N+1 queries.\n    # Rationale: Causes significant performance degradation, especially with many records.\n    # Bad example:\n    @contents = Content.all\n    @contents.each do |content|\n      puts content.user.email # This will cause N+1 queries if user is not eager loaded\n    end\n    ```\n\n*   **Complex JavaScript State Management**:\n    ```javascript\n    // MUST NOT: Implement large, complex client-side state management patterns (e.g., Redux-like stores).\n    // Rationale: Hotwire's strength is server-side rendering; complex JS state defeats this purpose and adds unnecessary complexity.\n    // Bad example:\n    // let globalState = { user: {}, notifications: [] };\n    // function updateGlobalState(...) { ... }\n    // (Avoid this approach for general UI state)\n    ```\n    *   **Correction**: Rely on server-rendered HTML for state, and use Stimulus for isolated UI component state.\n\n*   **Inline Custom CSS Styles**:\n    ```html\n    <!-- MUST NOT: Use inline style attributes for styling unless absolutely necessary for dynamic, calculated styles. -->\n    <!-- Rationale: Violates separation of concerns, hard to maintain and override, defeats Tailwind's purpose. -->\n    <div style=\"background-color: blue; padding: 16px;\">\n      Hello\n    </div>\n    ```\n    *   **Correction**: Use Tailwind utility classes: `<div class=\"bg-blue-500 p-4\">Hello</div>`\n\n## 5. Architecture Patterns\n\n### 5.1 Component/Module Structure Guidelines\n\n*   **Rails MVC with Enhancements**:\n    *   **Controllers**: Handle HTTP requests, authenticate users, authorize actions, call appropriate service objects or models, and render views. Keep them thin.\n    *   **Models**: Contain core business logic, data validations, associations, and database interactions via Active Record. Use `concerns` for shared model behaviors.\n    *   **Views**: Focus solely on presenting data. Contain minimal logic, primarily loops and conditionals. Utilize partials (`_partial.html.erb`) for reusability.\n    *   **Service Objects**: For business processes that involve multiple models, external APIs, or complex transactional logic. They are single-responsibility classes.\n    *   **Form Objects**: For handling complex form submissions that don't map directly to a single Active Record model, or require specific data transformations before saving.\n    *   **Jobs**: For long-running or asynchronous tasks (e.g., sending emails, generating reports) using Active Job.\n\n*   **Hotwire Frontend Components**:\n    *   **Turbo Drive**: Manages full page navigation without full page reloads.\n    *   **Turbo Frames**: Define independent UI regions that can be updated in isolation by fetching HTML fragments from the server. Use `turbo_frame_tag` in views.\n    *   **Turbo Streams**: Push HTML changes from the server to the client in real-time via WebSockets or HTTP responses. Use `turbo_stream` helpers in controllers or `channels`.\n    *   **Stimulus Controllers**: Provide lightweight JavaScript behavior directly on HTML elements. Keep them small and focused on DOM manipulation.\n\n### 5.2 Data Flow Patterns\n\n*   **Client-Server Interaction (HTTP/Hotwire)**:\n    1.  User action (e.g., link click, form submission) triggers a Turbo Drive navigation or Turbo Frame request.\n    2.  Browser sends an HTTP request to the Rails application.\n    3.  Rails controller processes the request, interacts with models and services.\n    4.  Rails renders an HTML response (full page, Turbo Frame, or Turbo Stream).\n    5.  Browser updates the UI based on the received HTML.\n\n*   **Real-time Data Flow (Action Cable)**:\n    1.  Client subscribes to an Action Cable channel (e.g., `ChatChannel`).\n    2.  Server (Rails) broadcasts messages to the channel via Redis Pub/Sub.\n    3.  Subscribed clients receive messages via WebSocket and update their UI (often via Turbo Streams).\n\n*   **Database Interaction**:\n    *   All database operations **MUST** go through Active Record ORM.\n    *   **MUST** use transactions for operations that require atomicity (e.g., `ActiveRecord::Base.transaction do ... end`).\n    *   **MUST** define appropriate indexes on frequently queried columns (e.g., foreign keys, search fields).\n\n### 5.3 State Management Conventions\n\n*   **Server-Side State (Primary)**:\n    *   User authentication state managed by Rails sessions.\n    *   Application data state (content, users, chats) stored in PostgreSQL.\n    *   View state often re-rendered by the server on each request or Turbo update.\n*   **Client-Side State (Minimal)**:\n    *   **MUST**: Limit client-side state to temporary UI states (e.g., tab selection, dropdown visibility) managed by Stimulus controllers.\n    *   **MUST NOT**: Implement global JavaScript state stores for application data.\n\n### 5.4 API Design Standards\n\n*   **RESTful Principles**:\n    *   **MUST**: Adhere to RESTful principles for defining routes and controller actions (e.g., `resources :contents` for CRUD operations).\n    *   **MUST**: Use standard HTTP verbs (GET, POST, PUT/PATCH, DELETE) appropriately.\n*   **HTML-Over-The-Wire (Default)**:\n    *   **MUST**: Prioritize serving HTML over JSON for UI updates, leveraging Turbo Frames and Turbo Streams.\n*   **JSON APIs (As Needed)**:\n    *   If specific features (e.g., integration with mobile apps, complex frontend-only interactions) require a JSON API, **MUST** follow a consistent JSON format.\n    *   **MUST** include appropriate HTTP status codes (e.g., 200 OK, 201 Created, 400 Bad Request, 404 Not Found, 422 Unprocessable Entity).",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "design-guide",
      "content": "# 경제 콘텐츠 통합 커뮤니티 디자인 가이드\n\n## 1. Overall Mood (전체적인 무드)\n서비스의 핵심 가치인 '신뢰성'과 '전문성'을 기반으로, 경제 초보자도 쉽게 다가갈 수 있는 '명료함'과 '친근함'을 더합니다. 복잡한 경제 정보를 체계적으로 정리하여 보여주는 지적인 분위기를 연출하되, 차갑지 않고 사용자의 학습과 성장을 돕는 따뜻하고 현대적인 느낌을 전달합니다. 전체적으로 정돈되고 직관적인 인터페이스를 통해 사용자가 콘텐츠에 집중할 수 있는 환경을 제공하는 것을 목표로 합니다.\n\n## 2. Reference Service (참조 서비스)\n콘텐츠 중심의 미니멀한 디자인과 뛰어난 가독성을 제공하는 서비스를 참조하여, 우리 서비스의 방향성을 구체화합니다.\n\n- **Name**: Medium\n- **Description**: 다양한 분야의 전문가와 사용자들이 글을 게시하고 공유하는 콘텐츠 퍼블리싱 플랫폼.\n- **Design Mood**: 텍스트 중심의 미니멀리즘. 불필요한 시각 요소를 최소화하여 콘텐츠 가독성을 극대화한 깔끔하고 정제된 디자인.\n- **Primary Color**: `#000000` (Text), `#FFFFFF` (Background)\n- **Secondary Color**: `#1A8917` (Green for Accent)\n\n## 3. Color & Gradient (색상 & 그라데이션)\n신뢰감을 주는 차가운 계열의 색상을 중심으로, 사용자의 행동을 유도하고 긍정적인 경험을 제공하기 위한 따뜻한 색상을 포인트로 사용합니다.\n\n- **Primary Color**: `#0052CC` (Indigo Blue) - 신뢰, 안정, 지성\n- **Secondary Color**: `#1EC7A6` (Teal) - 성장, 명료함, 새로움\n- **Accent Color**: `#FFD166` (Warm Amber) - 주의, 강조, 긍정\n- **Grayscale**:\n    - `#1A202C` (Text)\n    - `#718096` (Subtle Text)\n    - `#E2E8F0` (Border / Divider)\n    - `#F5F7FA` (Background)\n    - `#FFFFFF` (Card Background / White)\n- **Mood**: Cool tones, medium saturation\n- **Color Usage**:\n    - **Primary**: 핵심 CTA 버튼(로그인, 구독, 글쓰기), 활성화된 내비게이션, 주요 링크 등 가장 중요한 상호작용 요소에 사용하여 신뢰감을 부여합니다.\n    - **Secondary**: 콘텐츠 태그, 보조 버튼, 새로운 알림 표시 등 서비스에 활기와 신선함을 더하는 요소에 사용합니다.\n    - **Accent**: 중요한 공지, 사용자의 이목을 집중시켜야 하는 프로모션 배너 등에 제한적으로 사용하여 피로도를 낮추고 주목도를 높입니다.\n    - **Grayscale**: 전체 레이아웃의 기반이 되며, 텍스트 가독성을 확보하고 시각적 계층을 명확히 구분하는 데 사용합니다.\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n경제 초보자도 쉽게 정보를 습득할 수 있도록 가독성과 명료성에 초점을 맞춘 타이포그래피 시스템을 정의합니다. 웹 접근성을 준수하며, 모바일 환경에서도 편안하게 읽을 수 있도록 설정합니다.\n\n- **Font Family**: Pretendard (가독성이 뛰어난 범용 고딕체)\n\n- **Heading 1 (페이지 제목)**:\n    - Font: Pretendard\n    - Size: 28px\n    - Weight: Bold (700)\n    - Letter Spacing: -0.02em\n\n- **Heading 2 (섹션 제목, 카드 제목)**:\n    - Font: Pretendard\n    - Size: 22px\n    - Weight: Bold (700)\n    - Letter Spacing: -0.015em\n\n- **Body (본문)**:\n    - Font: Pretendard\n    - Size: 16px\n    - Weight: Regular (400)\n    - Line Height: 1.7\n    - Paragraph Spacing: 16px\n\n- **Sub-text / Caption (메타 정보, 설명)**:\n    - Font: Pretendard\n    - Size: 14px\n    - Weight: Regular (400)\n    - Line Height: 1.5\n\n## 5. Layout & Structure (레이아웃 & 구조)\n모바일 퍼스트 원칙에 따라 설계하며, 다양한 디바이스에서 일관된 사용자 경험을 제공합니다. 콘텐츠 탐색의 효율성을 높이는 구조를 채택합니다.\n\n- **Grid System**: 12-Column Grid System (Bootstrap 기준)\n- **Spacing Unit**: 8px 기반의 스페이싱 시스템 (8px, 16px, 24px, 32px...)을 적용하여 컴포넌트 간의 간격을 일관되게 유지합니다.\n- **Layout Principles**:\n    - **Desktop (≥ 992px)**:\n        - 전체 너비는 최대 `1200px`로 제한하여 가독성을 확보합니다.\n        - `상단 GNB` + `좌측 LNB(필터)` + `중앙 콘텐츠 영역`의 2단 구조를 기본으로 합니다. LNB는 콘텐츠 탐색 시 필터링 기능을 제공합니다.\n    - **Tablet (≥ 768px)**:\n        - 2단 구조를 유지하되, LNB의 너비를 줄이거나 필요 시 숨김 처리(토글 버튼)합니다.\n    - **Mobile (< 768px)**:\n        - 모든 요소를 1단으로 재배치하는 반응형 레이아웃을 적용합니다.\n        - GNB는 햄버거 메뉴로 통합하고, LNB 필터 기능은 별도의 Bottom Sheet 또는 필터 아이콘 클릭 시 전체 화면으로 제공합니다.\n        - 핵심 기능(홈, 검색, 채팅, 마이페이지)은 `하단 내비게이션 바(Bottom Navigation Bar)`에 배치하여 접근성을 높입니다.\n\n## 6. Visual Style (비주얼 스타일)\n전문적이면서도 친근한 서비스 이미지를 구축하기 위해 일관된 비주얼 스타일 가이드를 따릅니다.\n\n- **Icons**:\n    - 스타일: 간결하고 명확한 의미를 전달하는 **Line Style** 아이콘 (e.g., Heroicons, Feather Icons)을 사용합니다.\n    - 두께와 모서리(Corner Radius) 등 전체 아이콘 세트의 시각적 통일성을 유지합니다.\n- **Illustrations**:\n    - 스타일: 온보딩, 빈 화면(Empty State), 기능 소개 등에 사용되며, 부드러운 색감과 단순한 형태로 구성하여 사용자가 느낄 수 있는 심리적 장벽을 낮춥니다.\n    - 서비스의 전문성을 해치지 않는 선에서 친근하고 긍정적인 느낌을 전달합니다.\n- **Images & Thumbnails**:\n    - 콘텐츠 카드에 사용되는 썸네일은 `16:9` 또는 `4:3` 비율로 통일하여 피드 전체의 시각적 안정감을 확보합니다.\n    - 이미지가 없는 경우, 서비스 로고나 카테고리 아이콘을 활용한 세련된 Placeholder를 제공합니다.\n\n## 7. UX Guide (UX 가이드)\n타겟 사용자인 '경제 초보자'에 맞춰 직관적이고 쉬운 사용자 경험을 제공하는 것을 최우선 목표로 합니다.\n\n- **Target User**: Beginners (초보자)\n- **Core Principles**:\n    1.  **Clarity over Clutter (명료함 우선)**: 사용자가 정보 과부하를 느끼지 않도록 한 화면에 너무 많은 기능을 노출하지 않습니다. 직관적인 레이블링과 쉬운 언어를 사용하여 경제 용어에 익숙하지 않은 사용자도 쉽게 이해할 수 있도록 돕습니다.\n    2.  **Guided Discovery (점진적 안내)**: 최초 가입 시 관심사 설정, 핵심 기능에 대한 툴팁(Tooltip) 제공 등 단계별 온보딩 프로세스를 통해 사용자의 서비스 적응을 돕습니다. 복잡한 기능은 필요할 때 자연스럽게 발견하도록 유도합니다.\n    3.  **Effortless Interaction (손쉬운 상호작용)**: 소셜 로그인, 원클릭 북마크, 직관적인 채팅 UI 등 사용자의 노력을 최소화하는 인터랙션을 설계합니다. 사용자가 콘텐츠 소비와 학습이라는 본질적인 목표에만 집중할 수 있도록 합니다.\n    4.  **Positive Reinforcement (긍정적 피드백)**: '좋아요', '북마크', '공유' 등 사용자의 긍정적 행동에 대해 즉각적이고 명확한 시각적 피드백(미세한 애니메이션, 확인 메시지 등)을 제공하여 만족감과 성취감을 높입니다.\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n서비스 전반에 걸쳐 재사용되는 핵심 UI 컴포넌트의 디자인을 정의하여 일관성을 확보합니다.\n\n- **Buttons**:\n    - **Primary Button**: `Primary Color(#0052CC)` 배경, 흰색 텍스트. 가장 중요한 행동 유도(CTA)에 사용.\n    - **Secondary Button**: `Primary Color(#0052CC)` 테두리, `Primary Color` 텍스트. 보조적인 행동에 사용.\n    - **Ghost/Text Button**: 배경과 테두리 없이 텍스트만으로 구성. 덜 중요한 액션에 사용.\n    - **States**: Default, Hover, Pressed, Disabled 상태를 명확히 구분하여 디자인합니다. (Hover 시 약간 더 어둡거나 밝게 처리)\n\n- **Input Fields**:\n    - **Default**: `Grayscale(#E2E8F0)` 색상의 1px 테두리, 내부에 명확한 Placeholder 텍스트.\n    - **On-Focus**: 테두리 색상이 `Primary Color(#0052CC)`로 변경되고, 2px 두께로 강조.\n    - **States**: 에러 발생 시 테두리를 붉은색 계열로 변경하고, 하단에 에러 메시지를 명확히 표시합니다.\n\n- **Cards (Content)**:\n    - 피드의 기본 단위로, 정보 계층이 명확하게 설계됩니다.\n    - **구조**: 상단부터 `썸네일 이미지` → `콘텐츠 제목 (H2 스타일)` → `본문 요약 (Body 스타일)` → `메타 정보 (작성자, 날짜)` → `태그` 순으로 배치합니다.\n    - **Tags**: `Secondary Color(#1EC7A6)`를 활용한 배경 또는 텍스트 색상으로 시각적 구분을 줍니다.\n    - **Interaction**: 카드 전체에 Hover 효과를 적용하여 클릭 가능한 영역임을 인지시킵니다.\n\n- **Navigation**:\n    - **Top Navigation Bar (GNB)**: 로고, 주요 메뉴(홈, 탐색), 통합 검색창, 알림, 프로필/로그인 버튼으로 구성. 스크롤 시 상단에 고정됩니다.\n    - **Bottom Navigation Bar (Mobile)**: `홈`, `탐색`, `채팅`, `북마크`, `마이페이지` 등 사용 빈도가 높은 핵심 기능 5개를 배치하여 한 손 조작 편의성을 극대화합니다. 활성화된 탭은 `Primary Color`로 강조합니다.",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "ia",
      "content": "# 경제 콘텐츠 통합 커뮤니티 정보 구조(Information Architecture)\n\n## 1. 사이트맵 (Site Map)\n서비스의 전체 페이지 구조를 계층적으로 나타냅니다. 인증 여부와 사용자 역할(일반 사용자, 관리자)에 따라 접근 가능한 메뉴를 구분합니다.\n\n- **공통 / 비로그인 사용자**\n  - 홈 (콘텐츠 피드)\n  - 탐색\n    - 태그별 콘텐츠 목록\n  - 콘텐츠 상세 페이지\n  - 로그인\n  - 회원가입\n    - 관심사 설정\n  - 이용약관\n  - 개인정보처리방침\n\n- **로그인 사용자 (Auth Required)**\n  - (공통 페이지 모두 포함)\n  - **콘텐츠**\n    - 콘텐츠 올리기/공유하기\n  - **채팅**\n    - 채팅방 목록\n    - 채팅방\n  - **내 활동**\n    - 내 피드 (개인화 홈)\n    - 북마크\n    - 마이페이지\n      - 프로필 수정\n      - 계정 설정\n  - **알림**\n    - 알림 센터\n\n- **관리자 (Admin Required)**\n  - 관리자 대시보드 (통계)\n  - 회원 관리\n    - 회원 목록\n    - 회원 상세 정보\n  - 콘텐츠 관리\n    - 콘텐츠 목록\n    - 신고된 콘텐츠 관리\n  - 태그 관리\n\n## 2. 사용자 흐름 (User Flow)\n핵심 기능에 대한 사용자의 단계별 주요 행동 경로를 정의합니다.\n\n**- 핵심 과업 1: 신규 사용자의 콘텐츠 탐색 및 북마크**\n  1. 사용자가 SNS 광고를 통해 서비스 랜딩 페이지(홈)에 유입된다.\n  2. 구글/카카오 소셜 로그인을 통해 간편하게 회원가입을 완료한다.\n  3. 온보딩 과정에서 관심 주제(e.g., 주식, 거시경제) 태그를 선택한다.\n  4. 선택한 관심사를 기반으로 구성된 개인화 피드(홈)를 탐색한다. (무한 스크롤)\n  5. 흥미로운 콘텐츠 카드를 클릭하여 콘텐츠 상세 페이지로 이동한다.\n  6. 콘텐츠를 읽고, 유용하다고 판단하여 '북마크' 아이콘을 클릭한다.\n  7. \"북마크에 추가되었습니다\"라는 확인 메시지(Toast)를 확인한다.\n\n**- 핵심 과업 2: 기존 사용자의 실시간 채팅 참여**\n  1. 로그인한 사용자가 상단 GNB 또는 모바일 하단 내비게이션의 '채팅' 메뉴를 클릭한다.\n  2. 활성화된 채팅방 목록 페이지로 이동한다.\n  3. 현재 읽고 있는 콘텐츠와 관련된 '주식 토론방'에 입장한다.\n  4. 다른 사용자들의 대화를 읽다가 궁금한 점이 생겨 채팅 입력창에 질문을 입력하고 '전송' 버튼을 누른다.\n  5. 자신의 메시지가 채팅창에 즉시 표시되는 것을 확인한다.\n  6. 다른 사용자로부터 답변이 오면 실시간으로 메시지를 확인하고 대화를 이어간다.\n\n**- 핵심 과업 3: 크리에이터의 콘텐츠 업로드**\n  1. 로그인한 사용자가 GNB의 '글쓰기' 또는 '콘텐츠 올리기' 버튼을 클릭한다.\n  2. 콘텐츠 업로드 페이지로 이동한다.\n  3. 유튜브 영상 링크, 뉴스레터 본문 등 공유할 콘텐츠 정보를 입력 양식에 맞게 작성한다.\n  4. 콘텐츠와 관련된 태그(e.g., #미국주식, #금리)를 추가한다.\n  5. '공유하기' 버튼을 클릭하여 콘텐츠 발행을 완료한다.\n  6. 발행이 완료된 자신의 콘텐츠 상세 페이지로 리디렉션된다.\n\n## 3. 네비게이션 구조 (Navigation Structure)\n사용자가 서비스 내에서 쉽게 이동할 수 있도록 설계된 주요 네비게이션 시스템입니다.\n\n- **Global Navigation Bar (GNB - 상단 네비게이션)**\n  - 모든 페이지 상단에 고정되어 일관된 접근점을 제공합니다.\n  - **구성 요소**:\n    - **로고**: 클릭 시 홈으로 이동\n    - **탐색**: 주요 콘텐츠 카테고리 및 태그 탐색 페이지로 이동\n    - **통합 검색창**: 전체 콘텐츠를 대상으로 검색\n    - **(로그인 전)**: 로그인, 회원가입 버튼\n    - **(로그인 후)**: 콘텐츠 올리기 버튼, 알림 아이콘, 프로필 드롭다운 (마이페이지, 북마크, 로그아웃)\n\n- **Bottom Navigation Bar (BNB - 모바일 하단 네비게이션)**\n  - 모바일 환경에서 핵심 기능에 대한 빠른 접근을 위해 화면 하단에 고정됩니다.\n  - **구성 요소**:\n    - **홈**: 개인화 피드\n    - **탐색**: 태그 기반 탐색\n    - **채팅**: 채팅방 목록\n    - **북마크**: 북마크한 콘텐츠 목록\n    - **마이페이지**: 프로필 및 설정\n\n- **Local Navigation Bar (LNB - 좌측 사이드바)**\n  - 데스크탑/태블릿 환경의 '탐색' 페이지 좌측에 위치하여 콘텐츠 필터링 기능을 제공합니다.\n  - **구성 요소**:\n    - 전체 태그 목록\n    - 인기 태그\n    - 정렬 옵션 (최신순, 인기순)\n\n- **Footer (푸터)**\n  - 모든 페이지 하단에 위치합니다.\n  - **구성 요소**: 서비스 소개, 이용약관, 개인정보처리방침, 고객센터 등 링크\n\n## 4. 페이지 계층 구조 (Page Hierarchy)\n들여쓰기를 사용하여 페이지 간의 상위-하위 관계와 정보의 깊이를 표현합니다.\n\n- / (홈, 피드)\n- /explore\n  - /explore/tags/:tag_name (태그별 콘텐츠 목록)\n- /contents\n  - /contents/new (콘텐츠 업로드)\n  - /contents/:id (콘텐츠 상세)\n  - /contents/:id/edit (콘텐츠 수정)\n- /auth\n  - /auth/login (로그인)\n  - /auth/signup (회원가입)\n- /chat\n  - /chat/rooms/:id (채팅방)\n- /me (로그인 사용자 전용 네임스페이스)\n  - /me/bookmarks (북마크)\n  - /me/notifications (알림 센터)\n  - /me/profile (프로필 보기)\n  - /me/settings (계정 설정)\n- /admin (관리자 전용)\n  - /admin/dashboard\n  - /admin/users\n    - /admin/users/:id\n  - /admin/contents\n  - /admin/reports\n\n## 5. 콘텐츠 구성 (Content Organization)\n주요 페이지별 핵심 콘텐츠 요소를 테이블 형식으로 정의합니다.\n\n| 페이지 | 핵심 콘텐츠 요소 |\n| --- | --- |\n| **홈 (개인화 피드)** | - 개인화 콘텐츠 피드 (무한 스크롤)<br>- 콘텐츠 카드 (썸네일, 제목, 요약, 작성자, 태그)<br>- 인기 태그 목록 |\n| **탐색 페이지** | - LNB (태그 필터, 정렬 옵션)<br>- 필터링된 콘텐츠 목록 (그리드 뷰)<br>- 페이지네이션 또는 무한 스크롤 |\n| **콘텐츠 상세 페이지** | - 콘텐츠 본문 (텍스트, 이미지, 임베드된 영상)<br>- 메타 정보 (제목, 작성자, 작성일, 조회수)<br>- 인터랙션 버튼 (좋아요, 북마크, 공유)<br>- 관련 태그 목록<br>- 댓글/의견 영역 |\n| **마이페이지** | - 사용자 프로필 정보 (아바타, 닉네임, 소개)<br>- 프로필 수정/계정 설정 링크<br>- 내가 작성한 글 목록<br>- 내가 좋아요 한 글 목록 |\n| **채팅방** | - 채팅방 제목 및 참여자 수<br>- 실시간 메시지 스트림 (사용자 아바타, 닉네임, 메시지, 시간)<br>- 메시지 입력창 및 전송 버튼<br>- 신고/차단 기능 |\n| **관리자 대시보드** | - 핵심 지표 통계 차트 (MAU, 신규 가입, 콘텐츠 수)<br>- 최근 신고 내역 요약<br>- 관리 메뉴 바로가기 (회원, 콘텐츠 관리) |\n\n## 6. 인터랙션 패턴 (Interaction Patterns)\n서비스 전반에 걸쳐 일관되게 사용될 주요 인터랙션 패턴을 정의합니다.\n\n- **무한 스크롤 (Infinite Scroll)**: 홈 피드, 탐색 페이지 등 콘텐츠 목록에서 사용자가 끊김 없이 콘텐츠를 탐색할 수 있도록 제공합니다.\n- **모달 (Modal)**: 중요한 확인(e.g., 회원 탈퇴, 콘텐츠 삭제)이나 소셜 로그인과 같이 현재 맥락을 벗어나지 않으면서 부가적인 과업을 수행해야 할 때 사용합니다.\n- **토스트/스낵바 (Toast/Snackbar)**: 북마크 추가, 정보 수정 완료 등 사용자의 액션에 대한 비간섭적인 피드백을 짧게 제공할 때 사용합니다.\n- **툴팁 (Tooltip)**: 신규 사용자를 위해 아이콘이나 특정 기능에 대한 간단한 도움말을 제공할 때 사용합니다. (e.g., '북마크' 아이콘 위에 마우스 오버 시 \"나중에 다시 볼 콘텐츠를 저장하세요.\" 표시)\n- **바텀 시트 (Bottom Sheet)**: 모바일 환경에서 필터나 추가 옵션 메뉴를 화면 하단에서 슬라이드 업하여 보여줌으로써 접근성을 높입니다.\n- **아코디언 (Accordion)**: FAQ나 설정 메뉴 등 많은 정보를 구조적으로 보여주고, 사용자가 필요한 항목만 펼쳐볼 수 있도록 할 때 사용합니다.\n\n## 7. URL 구조 (URL Structure)\n사용자 및 검색엔진 최적화(SEO)를 고려한 일관되고 예측 가능한 URL 구조를 정의합니다.\n\n- **리소스 기반 명명**: URL은 명사를 사용하여 리소스를 명확히 표현합니다. (`/contents`, `/users`)\n- **계층 구조 반영**: 페이지 계층 구조를 URL 경로에 반영합니다. (`/me/settings`)\n- **고유 식별자**: 특정 리소스의 상세 페이지는 고유 ID를 사용합니다. (`/contents/:id`)\n- **파라미터 사용**: 정렬, 필터링 등 상태를 표현할 때는 쿼리 파라미터를 사용합니다. (`/explore?sort=popular`)\n- **소문자 및 하이픈(-)**: 단어는 소문자로 표기하고, 여러 단어로 이루어진 경우 하이픈(-)으로 연결합니다. (`/terms-of-service`)\n\n**예시:**\n- 콘텐츠 상세: `/contents/123`\n- 태그 기반 탐색: `/explore/tags/macro-economy`\n- 사용자 프로필: `/users/jiwoo-kim`\n- 내 설정: `/me/settings`\n- 관리자 회원 관리: `/admin/users`\n\n## 8. 컴포넌트 계층 구조 (Component Hierarchy)\n디자인 가이드와 일관성을 유지하며, 재사용 가능한 UI 컴포넌트를 정의합니다.\n\n- **Global Components (전역 컴포넌트)**\n  - `Header`: 로고, GNB, 검색창, 사용자 메뉴 포함\n  - `Footer`: 서비스 정보 및 링크 포함\n  - `BottomNavigationBar`: 모바일 전용 하단 내비게이션\n\n- **Shared Components (공유 컴포넌트)**\n  - `Button`: Primary, Secondary, Ghost 등 다양한 상태와 스타일을 가짐\n  - `InputField`: 텍스트 입력, 검색창 등 Form 요소\n  - `ContentCard`: 피드와 목록에 사용되는 콘텐츠 요약 카드\n  - `Tag`: 콘텐츠에 연관된 태그를 시각적으로 표시\n  - `Avatar`: 사용자 프로필 이미지를 표시\n  - `Modal`: 확인, 알림, 폼 등을 담는 대화상자\n  - `Toast`: 간단한 피드백 메시지\n  - `Spinner / Skeleton`: 데이터 로딩 상태 표시\n\n- **Page-Specific Components (페이지 특화 컴포넌트)**\n  - `FeedFilterSidebar`: 탐색 페이지의 LNB 필터\n  - `OnboardingStepper`: 회원가입 시 관심사 설정 단계 표시\n  - `ChatMessage`: 채팅방의 개별 메시지 버블\n  - `NotificationItem`: 알림 센터의 각 알림 항목\n  - `AdminStatCard`: 관리자 대시보드의 통계 카드",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "git-commit-message",
      "content": "\n# Git Commit Message Rules\n\n## Format Structure\n```\n<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]\n```\n\n## Types (Required)\n- `feat`\n- `fix`\n- `docs`\n- `style`\n- `refactor`\n- `perf`\n- `test`\n- `chore`\n- `ci`\n- `build`\n- `revert`\n\n## Scope (Optional)\n- Component, file, or feature area affected\n- Use kebab-case: `user-auth`, `payment-api`\n- Omit if change affects multiple areas\n\n## Description Rules\n- Use imperative mood\n- No capitalization of first letter\n- No period at end\n- Max 50 characters\n- Be specific and actionable\n\n## Body Guidelines\n- Wrap at 72 characters\n- Explain what and why, not how\n- Separate from description with blank line\n- Use bullet points for multiple changes\n\n## Footer Format\n- `BREAKING CHANGE:` for breaking changes\n- `Closes #123` for issue references\n- `Co-authored-by: Vooster AI (@vooster-ai)`\n\n## Examples\n```\nfeat(auth): add OAuth2 Google login\n\nfix: resolve memory leak in user session cleanup\n\ndocs(api): update authentication endpoints\n\nrefactor(utils): extract validation helpers to separate module\n\nBREAKING CHANGE: remove deprecated getUserData() method\n```\n\n## Workflow Integration\n**ALWAYS write a commit message after completing any development task, feature, or bug fix.**\n\n## Validation Checklist\n- [ ] Type is from approved list\n- [ ] Description under 50 chars\n- [ ] Imperative mood used\n- [ ] No trailing period\n- [ ] Meaningful and clear context\n    ",
      "writedAt": "2025-08-03T19:28:53.906Z"
    },
    {
      "type": "isms-p",
      "content": "\n# ISMS-P Based Secure Development Rules (v1.0)\n# This document defines the mandatory security rules for developers during code implementation.\n# Reference: Based on the Information Security Management System - Personal Information (ISMS-P) standard.\n\n## 1. Authentication & Authorization\n- **(A-1) User Identification and Authentication**\n  - **MUST**: Every user must be individually identifiable. The use of shared accounts is prohibited.\n  - **MUST**: Passwords MUST satisfy one of the following policies:\n    - (a) 8+ characters with a mix of letters, numbers, and special characters.\n    - (b) 10+ characters with a mix of letters and numbers.\n  - **MUST**: An account lockout policy MUST be implemented for failed login attempts (e.g., lock the account for 5 minutes after 5 consecutive failures).\n\n- **(A-2) Management of Authentication Credentials**\n  - **MUST**: Authentication credentials such as passwords MUST be stored using an adaptive hash function like **bcrypt, scrypt, or Argon2**. (Using SHA-256 alone is prohibited).\n\n- **(A-3) Privilege Management**\n  - **MUST**: Grant only the minimum necessary privileges for a role, following the **Principle of Least Privilege**.\n  - **MUST**: All actions of granting, changing, and revoking privileges MUST be logged.\n\n- **(A-4) Privileged Access Management**\n  - **MUST**: Administrative privileges (e.g., root, admin) MUST be granted to a minimum number of users, and the reason for using such accounts MUST be clearly logged.\n  - **SHOULD**: Administrative accounts SHOULD be separate from regular user accounts.\n\n## 2. Access Control\n- **(AC-1) System Access**\n  - **MUST**: Access to information systems by unauthorized users MUST be blocked.\n  - **MUST**: Access logs for critical systems MUST be retained for **at least one year**.\n\n- **(AC-2) Network Access**\n  - **MUST**: Public-facing services MUST be located in a **DMZ**, separate from the internal network.\n  - **MUST**: Firewalls MUST allow only the minimum necessary ports required for the service. (Prohibit \"allow all\" rules).\n\n## 3. Cryptography\n- **(C-1) Encryption of Sensitive Information**\n  - **MUST**: Legally defined sensitive information (e.g., national ID numbers, passport numbers, bank account numbers, credit card numbers) and passwords MUST be encrypted during storage and transmission.\n  - **MUST**: Use secure and vetted cryptographic algorithms such as **AES-256**.\n  - **MUST NOT**: Do not use homegrown or custom-developed cryptographic algorithms.\n\n- **(C-2) Cryptographic Key Management**\n  - **MUST NOT**: Do not hardcode cryptographic keys in source code, configuration files, or comments.\n  - **MUST**: Cryptographic keys MUST be managed securely using **environment variables** or a dedicated **Key Management System (KMS, HSM)**.\n  - **MUST**: Minimize access to keys and log all lifecycle management procedures, including generation, use, and destruction.\n\n## 4. Secure Development\n- **(D-1) Secure Design**\n  - **MUST**: Defense mechanisms against major vulnerabilities like the **OWASP Top 10** (e.g., SQL Injection, XSS, CSRF) MUST be incorporated during the design phase.\n\n- **(D-2) Secure Coding**\n  - **MUST**: Treat all external input (e.g., request parameters, headers, cookies) as untrusted. **Validation and sanitization** logic MUST always be applied.\n  - **MUST**: All SQL queries MUST use **parameterized queries (prepared statements)**. (Dynamic query string concatenation is prohibited).\n  - **MUST**: When handling errors, ensure that internal system details (e.g., stack traces, database information) are not exposed to the user.\n\n- **(D-3) Security Testing**\n  - **SHOULD**: Periodically scan for security vulnerabilities using static/dynamic analysis tools (**SAST/DAST**).\n\n## 5. Personal Information Handling\n- **(P-1) Collection and Use**\n  - **MUST**: Collect only the minimum personal information necessary to provide the service. The purpose of collection MUST be clearly disclosed to users, and consent must be obtained.\n  - **MUST NOT**: Do not process sensitive information (e.g., beliefs, ideology) or unique identification information without a legal basis or separate user consent.\n\n- **(P-2) Storage and Display**\n  - **MUST**: Personal information MUST be **masked** when displayed on screen (e.g., John D**, +1-***-***-1234, test@****.com).\n  - **MUST NOT**: Do not use personal information or provide it to third parties beyond the scope of the consented purpose.\n\n- **(P-3) Destruction**\n  - **MUST**: When the retention period expires or the processing purpose is achieved, personal information MUST be completely destroyed using an irreversible method.\n  - **MUST**: Establish a personal information destruction procedure and maintain a log of all destructions.\n\n## 6. Logging & Management\n- **(L-1) Log Recording**\n  - **MUST**: Logs for critical activities (e.g., login, access to personal information, privilege changes) MUST be securely retained for **at least one year**.\n  - **MUST**: Logs MUST be standardized and include at least the following: [Timestamp, User ID, Source IP Address, Request/Action, Success/Failure Status].\n",
      "writedAt": "2025-08-03T19:28:53.906Z"
    }
  ]
}